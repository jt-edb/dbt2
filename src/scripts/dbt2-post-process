#!/bin/sh
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2006      Open Source Development Labs, Inc.
#               2006-2014 Mark Wong
#               2014      2ndQuadrant, Ltd.
#

MIXFILE=$1

if [ $# -ne 1 ]; then
	echo "usage: `basename $0` <mix.log>"
	exit 1
fi

R --slave --no-save << __EOF__
# Is there an escape error in pipe()? It shouldn't print the START marker line
# nor the TERMINATED line.
cmd <- "sed -n '/START/,/TERMINATED/{/START|TERMINATED/!p}' ${MIXFILE}"
mix <- read.csv(pipe(cmd), header=F)
mix <- mix[-1,]
mix <- mix[-nrow(mix),]

colnames(mix)[1] <- 'ctime'
colnames(mix)[2] <- 'txn'
colnames(mix)[3] <- 'status'
colnames(mix)[4] <- 'response'

# Get the ctime after the START marker and the ctime before the first
# TERMINATED marker.
start <- mix[1,]\$ctime
total_txn <- nrow(mix)
end <- mix[total_txn:total_txn,]\$ctime

duration = end - start
errors <- sum(mix\$status == "E")

cat("                         Response Time (s)\n")
cat(paste(" Transaction      %    Average :    90th %        Total        ",
          "Rollbacks      %\n", sep = ""))
cat(paste("------------  -----  ---------------------  -----------  ",
          "---------------  -----\n", sep = ""))

txn <- c("d", "n", "o", "p", "s")
txn_name <- c("Delivery", "New Order", "Order Status", "Payment",
              "Stock Level")

for (i in 1:5) {
  t_total <- sum(mix\$txn == txn[i])
  if (i == 2) {
    total_n <- t_total
  }
  t_rollback <- sum(mix\$txn == txn[i] & mix\$status == "R")
  t_mean <- mean(mix\$response[mix\$txn == txn[i]])
  t_q90 <- quantile(mix\$response[mix\$txn == txn[i]], .9)
  cat(sprintf("%12s  %5.2f  %9.3f : %9.3f  %11d  %15d  %5.2f\n",
              txn_name[i], t_total / total_txn * 100, t_mean, t_q90,
              t_total, t_rollback, t_rollback / t_total * 100))
}

cat(paste("------------  -----  ---------------------  -----------  ",
          "---------------  -----\n", sep = ""))
cat(sprintf("%0.2f new-order transactions per minute (NOTPM)\n",
            total_n / (duration / 60)))
cat(sprintf("%0.1f minute duration\n", duration / 60))
cat(sprintf("%d total unknown errors\n", errors))

# Calculate the ramp up time.

cmd <- "sed -e '/START/q' ${MIXFILE}"
mix <- read.csv(pipe(cmd), header=F)
mix <- mix[-nrow(mix),]

colnames(mix)[1] <- 'ctime'
colnames(mix)[2] <- 'txn'
colnames(mix)[3] <- 'status'
colnames(mix)[4] <- 'response'

start <- mix[1,]\$ctime
total_txn <- dim(mix)[1]
end <- mix[total_txn:total_txn,]\$ctime
duration = end - start

cat(sprintf("%0.1f seconds(s) ramping up\n", duration))
__EOF__
