#!/bin/sh

#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2005-2006 Open Source Development Labs, Inc.
#               2005-2021 Mark Wong
#

usage()
{
	echo "Usage:"
	echo "    dbt2-pgsql-build-db [options]"
	echo "    dbt2-pgsql-build-db -h"
	echo "Options:"
	echo "    -b"
	echo "        Load tables and create indexes in parallel."
	echo "    -l <port>"
	echo "        PostgreSQL port"
	echo "    -p <database_parameters>"
	echo "        PostgreSQL database parameters."
	echo "    -r"
	echo "        Drop existing database before building a new database"
	echo "    -s <c | plpgsql>"
	echo "        User defined functions to install, default: c"
	echo "    -t"
	echo "        Use tablespaces."
	echo "    -w <scale factor>"
	echo "        Number of warehouses to build. Default 1."
}

gen_table()
{
	local TABLE=$1
	local WAREHOUSES=$2
	local SEED=$3
	dbt2-datagen --direct -w $WAREHOUSES --pgsql --table $TABLE --seed $SEED || exit 1
}

WAREHOUSES=1
GENERATE_DATAFILE=0
PRIVILEGED=1
REBUILD_DB=0
UDF_TYPE="c"
while getopts "bhl:p:rs:tuw:" OPT; do
	case ${OPT} in
	b)
		BACKGROUND_FLAG="-b"
		;;
	h)
		usage
		exit 0
		;;
	l)
		PORT=${OPTARG}
		;;
	p)
		PARAMETERS=$OPTARG
		;;
	r)
		REBUILD_DB=1
		;;
	s)
		UDF_TYPE=$OPTARG
		;;
	t)
		TABLESPACES_FLAG="-t"
		;;
	u)
		PRIVILEGED=0
		;;
	w)
		WAREHOUSES=${OPTARG}
		;;
	esac
done

if [ ! "x${PORT}" = "x" ]; then
	PORTARG="-l ${PORT}"
fi

if [ $REBUILD_DB -eq 1 ] && [ -d $DBT2PGDATA ]; then
	if [ $PRIVILEGED -eq 1 ]; then
		echo "Restarting the database to reset database parameters..."
		dbt2-pgsql-stop-db
		dbt2-pgsql-start-db -p "${PARAMETERS}" || exit 1
	fi
	dbt2-pgsql-drop-db ${PORTARG}
fi

if [ $PRIVILEGED -eq 1 ]; then
	dbt2-pgsql-init-db ${PORTARG} || exit 1
fi
dbt2-pgsql-create-db ${PORTARG} || exit 1
dbt2-pgsql-create-tables ${PORTARG} ${TABLESPACES_FLAG} || exit 1

which shuf > /dev/null 2>&1
if [ $? -eq 0 ]; then
	SEED=`shuf -i 1-65535 -n 1`
else
	echo "WARNING: install shuf to generate a random seed, using 1"
	SEED=1
fi

# FIXME: Make datagen take argument instead of setting environment variables
# for psql.
export PGPORT="${PORT}"
export PGDATABASE="${DBT2DBNAME}"
for TABLE in warehouse district customer item orders stock new_order history; do
	gen_table $TABLE $WAREHOUSES $SEED &
done
wait

dbt2-pgsql-create-indexes ${PORTARG} ${TABLESPACES_FLAG} || exit 1

dbt2-pgsql-load-stored-procs $PORTARG -t $UDF_TYPE || exit 1

if [ ! "x${PORT}" = "x" ]; then
	PORTARG="-p ${PORT}"
fi

psql ${PORTARG} -e -d ${DBT2DBNAME} -c "SELECT setseed(1);" || exit 1

# VACUUM FULL ANALYZE: Build optimizer statistics for newly-created
# tables. The VACUUM FULL is probably unnecessary; we want to scan the
# heap and update the commit-hint bits on each new tuple, but a regular
# VACUUM ought to suffice for that.

vacuumdb ${PORTARG} -z -f -d ${DBT2DBNAME} || exit 1

exit 0
